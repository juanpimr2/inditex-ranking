/** Auto-generated tests to reach high coverage.
 * Adjust package if your project root differs.
 */

package io.github.juanpimr2.inditex_ranking.service.validation.impl;

import io.github.juanpimr2.inditex_ranking.domain.Product;
import io.github.juanpimr2.inditex_ranking.service.validation.ProductValidator;
import io.github.juanpimr2.inditex_ranking.service.validation.ValidationException;
import org.junit.jupiter.api.Test;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class ProductValidatorImplTest {

    private final ProductValidator validator = new ProductValidatorImpl();

    private static Product p(Long id, int sales){
        Product pr = new Product();
        pr.setId(id);
        pr.setName("X");
        pr.setSalesUnits(sales);
        pr.setStockBySize(new LinkedHashMap<>());
        return pr;
    }

    @Test
    void validList_passes() {
        List<Product> list = List.of(p(1L, 10), p(2L, 0));
        assertDoesNotThrow(() -> validator.validateProducts(list));
    }

    @Test
    void nullId_throws() {
        List<Product> list = List.of(p(null, 10));
        assertThrows(ValidationException.class, () -> validator.validateProducts(list));
    }

    @Test
    void duplicate_throws() {
        List<Product> list = List.of(p(1L, 1), p(1L, 2));
        assertThrows(ValidationException.class, () -> validator.validateProducts(list));
    }

    @Test
    void negativeSales_throws() {
        List<Product> list = List.of(p(5L, -1));
        assertThrows(ValidationException.class, () -> validator.validateProducts(list));
    }

    @Test
    void blankName_throws() {
        Product pr = p(9L, 0);
        pr.setName(" ");
        assertThrows(ValidationException.class, () -> validator.validateProducts(List.of(pr)));
    }
}
